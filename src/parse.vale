import stdlib.collections.list.*;
import stdlib.ifunction.*;

struct NotesCollector {
  nextId! int;
  ids List<int>;
  idByName HashMap<StrSlice, int, StrSliceHasher, StrSliceEquator>;
  nameById HashMap<int, StrSlice, IntHasher, IntEquator>;
  noteContentsById HashMap<int, Section, IntHasher, IntEquator>;
}
func NotesCollector(nextId int) NotesCollector {
  NotesCollector(
    nextId,
    List<int>(),
    HashMap<StrSlice, int, StrSliceHasher, StrSliceEquator>(
      StrSliceHasher(), StrSliceEquator()),
    HashMap<int, StrSlice, IntHasher, IntEquator>(IntHasher(), IntEquator()),
    HashMap<int, Section, IntHasher, IntEquator>(IntHasher(), IntEquator()))
}
func Slice(newColor StrSlice, notesCollector NotesCollector) Slice {
  [nextId, ids, idByName, nameById, noteContentsById] = notesCollector;
  return Slice(ids, newColor, noteContentsById);
}

// Add to stdlib
func DropInto_<T>(source List<T>, destination &List<T>) {
  [intermediate] = (source).reverse();
  drop_into(intermediate, &{ destination.add(_); });
}

func parse(root &Path, filepath str) Page {
  s = readFileAsString(filepath);
  iter = ParseIter(s.slice());
  
  metadata = parseMetadata(&iter);

  notesCollector = NotesCollector(0);

  pageMembers = List<PageMember>();

  while iter.hasNext() {
    iter.skipNewlines();

    if iter.nextIs("<$") {
      [newSections, newNotesCollector] = parseDynPageMembers(root, &iter, set notesCollector = NotesCollector(0));
      [ignore0, ignore1, ignore2, ignore3, ignore4] = set notesCollector = newNotesCollector;
      // Replace above with:
      //   [newSections, set notesCollector] = parseDynPageMembers(root, notesCollector, &iter)

      (newSections).DropInto_(&pageMembers);
    } else if iter.nextIs("<slice") {
      pageMembers.add(
          parseSlice(
              root,
              set notesCollector = NotesCollector(notesCollector.nextId),
              &iter));
    } else if iter.nextIs("<ignore>") {
      iter.getUntilExpected("</ignore>");
    } else {
      section =
          parseSection(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((iter) => {
                return iter.hasNext() and not iter.nextIs("<slice") and not iter.nextIs("\n\n\n");
              }));
      pageMembers.add(section);
    }
  }

  pageMembers.add(
      Slice(
          "".slice(),
          set notesCollector = NotesCollector(notesCollector.nextId)));

  return Page(metadata, pageMembers);
}


func parseMetadata(input &ParseIter) Metadata {
  title = "".slice();
  subtitle = "".slice();
  author = "".slice();
  date = "".slice();
  realm = "".slice();
  path = "".slice();
  namespace = "".slice();
  layout = "".slice();
  seriesName = "".slice();
  sponsorLink = false;
  seriesEntries = List<Link>();
  cssFiles = List<StrSlice>();

  if input.skipIfNext("---\n") {
    while not input.skipIfNext("---\n") {
      attrName = input.getUntilExpected(":");
      input.skipWhitespace();

      if attrName == "title" {
        set title = input.getUntilExpected("\n");
      } else if attrName == "subtitle" {
        set subtitle = input.getUntilExpected("\n");
      } else if attrName == "author" {
        set author = input.getUntilExpected("\n");
      } else if attrName == "date" {
        set date = input.getUntilExpected("\n");
      } else if attrName == "realm" {
        set realm = input.getUntilExpected("\n");
      } else if attrName == "path" {
        set path = input.getUntilExpected("\n");
      } else if attrName == "namespace" {
        set namespace = input.getUntilExpected("\n");
      } else if attrName == "layout" {
        set layout = input.getUntilExpected("\n");
      } else if attrName == "sponsor" {
        input.getUntilExpected("\n");
        set sponsorLink = true;
      } else if attrName == "series-name" {
        set seriesName = input.getUntilExpected("\n");
      } else if attrName == "css" {
        cssFiles.add(input.getUntilExpected("\n"));
      } else if attrName == "series-entry" {
        seriesEntries.add(addLink(&input, true));
        input.skipExpect("\n");
      } else {
        panic("Unknown attribute: " + attrName);
      }
    }
  }

  if seriesEntries.len() > 0 {
    // A series link with an empty url represents the current page
    foundEmptyLink = false;
    foreach link in &seriesEntries {
      if link.text == "" and link.url == "" {
        vassert(not foundEmptyLink, "Already an empty series entry!");
        set foundEmptyLink = true;
      }
    }
    vassert(foundEmptyLink, "No empty series entry!");
  }

  return Metadata(title, subtitle, author, date, realm, path, seriesName, seriesEntries, layout, namespace, cssFiles, sponsorLink);
}


func getListItemPrefix(style str) str {
  if style == "bullet" { " * " }
  else if style == "ordered" { " 1. " }
  else if style == "blank" { " . " }
  else { panic("unknown list style") }
}


func skipListItemPrefix(iter &ParseIter) {
  if iter.skipIfNext(" * ") { }
  else if iter.skipIfNext(" 1. ") { }
  else if iter.skipIfNext(" . ") { }
  else { panic ("Expected list item prefix!"); }
}


func nextIsListItem(originalIter &ParseIter, style str) bool {
  lookaheadIter = copy(&originalIter);
  lookaheadIter.skipNewlines();
  while lookaheadIter.skipIfNext("   ") { }
  return lookaheadIter.nextIs(getListItemPrefix(style));
}


func parseList(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter,
    continueF &IFunction1<mut, &ParseIter, bool>)
PolyList {
  style =
      if iter.nextIs(" 1. ") { "ordered" }
      else if iter.nextIs(" * ") { "bullet" }
      else if iter.nextIs(" . ") { "blank" }
      else { panic("unknown list style") };

  rootList = PolyList(style, List<ListMember>());
  // A stack of all the currently open lists.
  openLists = List<&PolyList>();
  openLists.add(&rootList);

  while continueF(iter) and iter.nextIsListItem(style) {
    iter.skipNewlines();
    thisListItemIndentation = 1;
    while iter.skipIfNext("   ") {
      set thisListItemIndentation = thisListItemIndentation + 1;
    }
    skipListItemPrefix(iter);

    while thisListItemIndentation > openLists.len() {
      newList = PolyList(style, List<ListMember>());
      newListBorrow = &newList;
      openLists.get(openLists.len() - 1).members.add(newList);
      openLists.add(newListBorrow);
    }
    while thisListItemIndentation < openLists.len() {
      openLists.remove(openLists.len() - 1);
    }

    lineContents =
        parseLine(
            root,
            &notesCollector,
            &iter,
            &IFunction1<mut, &ParseIter, bool>((iter) => {
              return continueF(iter) and not iter.nextIs("\n");
            }));
    openLists.get(openLists.len() - 1).members.add(ListItem(lineContents));
  }

  return rootList;
}


func parseQuote(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter,
    continueF &IFunction1<mut, &ParseIter, bool>)
Quote {
  inlines = List<InlineNode>();

  while continueF(iter) and iter.nextIs("> ") {
    iter.skipExpect("> ");

    lineContents =
        parseInlines(
            root,
            &notesCollector,
            &iter,
            &IFunction1<mut, &ParseIter, bool>((iter) => {
              return continueF(iter) and not iter.nextIs("\n");
            }));
    while lineContents.inners.len() > 0 {
      inlines.add(lineContents.inners.remove(0));
    }
  }

  return Quote(Compound(inlines));
}

func parseCallout(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter,
    continueF &IFunction1<mut, &ParseIter, bool>)
Callout {
  inlines = List<InlineNode>();

  while continueF(iter) and iter.nextIs("! ") {
    iter.skipExpect("! ");

    lineContents =
        parseInlines(
            root,
            &notesCollector,
            &iter,
            &IFunction1<mut, &ParseIter, bool>((iter) => {
              return continueF(iter) and not iter.nextIs("\n");
            }));
    while lineContents.inners.len() > 0 {
      inlines.add(lineContents.inners.remove(0));
    }
  }

  return Callout(Compound(inlines));
}


func parseSplit(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
Split {
  iter.skipExpect("<<<<");
  iter.skipNewlines();

  columns = List<Column>();

  alternating = false;
  rightward = false;
  while true {
    columnSections = List<Section>();

    innerContinueF =
        IFunction1<mut, &ParseIter, bool>((iter) => {
          if not iter.hasNext() {
            panic("<<<< must end with \/\/\/\/");
          }
          return not iter.nextIs("\/\/\/\/") and not iter.nextIs("\\\\\\\\") and not iter.nextIs(">>>>");
        });

    while innerContinueF(iter) {
      columnSections.add(
          parseSection(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((iter) => {
                return innerContinueF(iter) and not iter.nextIs("\n\n\n");
              })));
      iter.skipNewlines();
    }

    column = Column(rightward, columnSections);

    columns.add(column);

    if iter.skipIfNext("\/\/\/\/") {
      set rightward = true;
    } else if iter.skipIfNext("\\\\\\\\") {
      set alternating = true;
      set rightward = false;
    } else {
      break;
    }
    iter.skipNewlines();
  }

  iter.skipNewlines();
  iter.skipExpect(">>>>");

  return Split(alternating, columns);
}


func nextIsNoteBegin(originalIter &ParseIter) bool {
  lookaheadIter = copy(&originalIter);
  if not lookaheadIter.skipIfNext("\n\n") {
    return false;
  }
  lookaheadIter.skipNewlines();
  return lookaheadIter.skipIfNext("#");
}


func parseSlice(
    root &Path,
    notesCollector NotesCollector,
    iter &ParseIter)
Slice {
  iter.skipExpect("<slice");

  newColor = "".slice();
  if iter.skipIfNext(" new-color=\"") {
    set newColor = iter.getUntilExpected("\"");
  }
  if iter.skipIfNext(">") {
    iter.skipNewlines();

    continueF =
        IFunction1<mut, &ParseIter, bool>((iter) => {
          if not iter.hasNext() {
            panic("<slice> must end with </slice>");
          }
          return not iter.nextIs("</slice>");
        });

    while continueF(iter) {
      iter.skipNewlines();
      iter.skipExpect("#");
      noteId = iter.getUntilExpected(":");

      noteOutput =
          parseSection(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((iter) => {
                return continueF(iter) and not iter.nextIsNoteBegin();
              }));
      iter.skipNewlines();
      notesCollector.addSeparateNote(noteId, noteOutput);
    }

    iter.skipIfNext("</slice>");
  } else if (iter.skipIfNext("/>") or iter.skipIfNext(" />")) {
    // Do nothing
  } else {
    panic("<slice should end in > or />");
  }

  return Slice(newColor, notesCollector);
}


func parseInlineNode(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
Opt<InlineNode> {
  if not iter.PreviousChar().slice().isWordChar() and iter.nextIs("*") {
    return Some<InlineNode>(parseBold(root, notesCollector, iter));
  } else if (not iter.PreviousChar().slice().isWordChar() and iter.nextIs("_")) {
    return Some<InlineNode>(parseItalic(root, notesCollector, iter));
  } else if (iter.nextIs("[#")) {
    return Some<InlineNode>(addInlineNote(root, notesCollector, iter));
  } else if (iter.nextIs("<$")) {
    return Some<InlineNode>(parseDynInline(root, notesCollector, iter));
  } else if (not iter.PreviousChar().slice().isWordChar() and iter.nextIs("[")) {
    return Some<InlineNode>(addLink(&iter, false));
  } else if (not iter.PreviousChar().slice().isWordChar() and iter.skipIfNext("`")) {
    code = iter.getUntilExpected("`");
    return Some<InlineNode>(InlineCode(code));
  } else {
    return None<InlineNode>();
  }
}

func parseInlines(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter,
    continueF &IFunction1<mut, &ParseIter, bool>)
Compound {
  inners = List<InlineNode>();

  currentTextNode StrSlice = "".slice();

  running = true;
  while running and iter.hasNext() {
    if not continueF(iter) {
      set running = false;
    } else {
      maybeInner = parseInlineNode(root, notesCollector, iter);
      if not maybeInner.isEmpty() {
        if currentTextNode != "" {
          inners.add(Text(set currentTextNode = "".slice()));
        }
        inners.add((maybeInner).get());
      } else {
        (maybeInner).drop();

        iter.skipIfNext("\\");
        nextChar = iter.getNext();

        set currentTextNode = (currentTextNode + nextChar).slice();
      }
    }
  }
  if currentTextNode != "" {
    inners.add(Text(set currentTextNode = "".slice()));
  }

  return Compound(inners);
}

func parseBold(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
Bold {
  iter.skipExpect("*");

  compound =
    parseInlines(
      root,
      &notesCollector,
      &iter,
      &IFunction1<mut, &ParseIter, bool>((iter) => {
        if not iter.hasNext() {
          panic("Must end bold!");
          return false;
        } else if (iter.nextIs("*")) {
          iter.skipExpect("*");
          return false;
        } else {
          return true;
        }
      }));

  return Bold(compound);
}

func parseItalic(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
Italic {
  iter.skipExpect("_");

  compound =
    parseInlines(
      root,
      &notesCollector,
      &iter,
      &IFunction1<mut, &ParseIter, bool>((iter) => {
        if not iter.hasNext() {
          panic("Must end italic!");
          return false;
        } else if (iter.nextIs("_")) {
          iter.skipExpect("_");
          return false;
        } else {
          return true;
        }
      }));

  return Italic(compound);
}


struct DynCall {
  name StrSlice;

  positionalArgs List<StrSlice>;
  // someday will likely change this to IDynExpr or something

  // eventually im thinking we can also include them in <> ... </> args if they need to be whole ASTs
}

func parseDynCall(
    root &Path,
    iter &ParseIter)
DynCall {
  iter.skipExpect("<$");

  callName =
      parseTextWhile(
          &iter,
          &IFunction1<mut, &ParseIter, bool>((it) => {
            if it.nextIs(" ") or it.nextIs("/") or it.nextIs(">") {
              return false;
            }
            return true;
          }));

  attrsInOpenTag = List<StrSlice>();

  while true {
    vassert(iter.hasNext(), "Unexpected end in dyn call!");

    if iter.nextIs("/>") or iter.nextIs(" />") {
      break;
    } else if iter.nextIs(">") {
      break;
    } else if iter.nextIs(" ") {
      iter.skipExpect(" ");

      attrName =
        if iter.nextIs("\"") {
          "".slice()
        } else {
          iter.getUntilExpected("=")
        };

      iter.skipExpect("\"");
      value =
          parseTextWhile(
              &iter,
              &IFunction1<mut, &ParseIter, bool>((it) => {
                not it.nextIs("\"")
              }));
      iter.skipExpect("\"");

      // someday, we'll do something with attrName

      attrsInOpenTag.add(value);

      // continue
    } else {
      vassert(false, "Unknown thing after dynamic call open.");
    }
  }

  if iter.skipIfNext("/>") or iter.skipIfNext(" />") {
    // good, stop here
  } else if iter.skipIfNext(">") {
    vassert(false, "impl! 927603795");
  } else {
    vassert(false, "Unknown end to dynamic call.");
  }

  positionalArgs = attrsInOpenTag; // + position args from body

  return DynCall(callName, positionalArgs);
}

func includeInline(
    root &Path,
    notesCollector &NotesCollector,
    filepath_str str)
Compound {
  filepath = root./(filepath_str);
  s = readFileAsString(filepath.str());
  inclusionIter = ParseIter(s.slice());

  return parseInlines(
      root,
      &notesCollector,
      &inclusionIter,
      &IFunction1<mut, &ParseIter, bool>((iter) => {
        true
      }));
}

func parseDynInline(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
InlineNode {
  [callName, positionalArgs] = parseDynCall(root, iter);

  // If we ever add more calls, add them here to this ladder
  if callName == "include" {
    vassert(positionalArgs.len() == 1, "Wrong number of args for call to {callName}, expected 1");
    filepath_str = positionalArgs.get(0).str();

    return includeInline(root, notesCollector, filepath_str);
  } else {
    (iter);
    (positionalArgs);
    (callName);
    panic("Unknown dynamic call name: {callName}");
    return Compound(List<InlineNode>());
  }
}

func parseLine(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter,
    continueF &IFunction1<mut, &ParseIter, bool>)
InlineNode {
  return parseInlines(
    root,
    &notesCollector,
    &iter,
    &IFunction1<mut, &ParseIter, bool>((iter) => {
      return continueF(iter) and iter.hasNext();
    }));
}



func parseTextWhile(
    iter &ParseIter,
    continueF &IFunction1<mut, &ParseIter, bool>)
StrSlice {
  code StrSlice = "".slice();

  while iter.hasNext() and continueF(iter) {
    set code = (code + iter.getNext()).slice();
  }

  return code;
}


func parseCodeItem(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
CodeItem {

  iter.skipExpect("```");

  lang =
      parseTextWhile(
          &iter,
          &IFunction1<mut, &ParseIter, bool>((it) => {
            if not it.hasNext() {
               panic("``` must have matching \\n```!");
            }
            return not it.skipIfNext("\n");
          }));
  if lang.contains(":") {
    panic("Language has : in it!");
  }
  if lang.contains(" ") {
    panic("Language has space in it!");
  }
  if lang.contains("`") {
    panic("Language has ` in it!");
  }

  // We register the chevron notes here and leave the code mostly untouched, because:
  // - If we slice up the code into a Compound with Text and NoteAnchor, then
  //   its harder later on to merge the text parts of the code back together to
  //   feed into the syntax highlighter (and hard to know where to put the
  //   anchors back in).
  // - If we syntax highlight the code now, it means we're making the decision
  //   now on how to display it, which belongs in the printing stage.
  // Though, we do replace the note name with a note id, to be consistent with how
  // NoteAnchor works.

  code =
      parseChevronNoteAnchors(
          root,
          &notesCollector,
          parseTextWhile(
              &iter,
              &IFunction1<mut, &ParseIter, bool>((it) => {
                if not it.hasNext() {
                  panic("``` must have matching \\n```!");
                }
                if it.nextIs("\n```") {
                  it.skipExpect("\n");
                  vassert(iter.nextIs("```"), "Bad code item end!");
                  return false;
                }
                return true;
              })));
  return CodeItem(lang, code.slice());
}

func parseCodeArgs(iter &ParseIter) List<StrSlice> {
  args = List<StrSlice>();

  running = true;
  while running {

    while iter.skipIfNext(" ") { }

    if iter.skipIfNext("\n") {
      set running = false;
    } else if iter.skipIfNext("`") {
      x = iter.getUntilExpected("`");
      args.add(slice("`" + x + "`"));
    } else {
      // Get until whitespace
      arg = parseTextWhile(
          &iter,
          &IFunction1<mut, &ParseIter, bool>((it) => {
            if not iter.hasNext() {
              panic("``` must have matching \\n```!");
            }
            return not iter.nextIs(" ") and not iter.nextIs("\n");
          }));
      args.add(arg);
    }
  }

  return args;
}

func parseCodeSnippet(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
CodeSnippet {
  args = List<StrSlice>();
  items = List<CodeItem>();

  while true {
    items.add(parseCodeItem(root, notesCollector, iter));

    vassert(iter.nextIs("```"), "Bad snippet end!");
    if not iter.hasNext() {
      break;
    }
    if iter.nextIs("```\n") {
      iter.skipExpect("```");
      break;
    }
    
    if iter.skipIfNext("```:") {
      // Now we'll parse args that come after the language, like in:
      //   ```Vale
      //   func main() {
      //     a = A();
      //   }
      //   ```: vstl/list.vale `struct A{}`
      set args = parseCodeArgs(iter);
      break;
    }

    // continue
  }

  return CodeSnippet(items, args);
}


// Looks through for any chevron notes like «mynote» and registers them with
// the notes collector.
func parseChevronNoteAnchors(
    root &Path,
    notesCollector &NotesCollector,
    haystack StrSlice)
str {
  result = "";

  iter = ParseIter(haystack);

  while iter.hasNext() {
    if iter.skipIfNext("«") {
      noteName = iter.getUntilExpected("»");
      id = addNamedNoteAnchor(root, notesCollector, noteName);
      set result = result + ("«" + id + "»");
    } else {
      set result = result + iter.getNext();
    }
  }

  return result;
}


func parseSection(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter,
    continueF &IFunction1<mut, &ParseIter, bool>)
Section {
  sectionMembers = List<SectionMember>();

  while continueF(iter) {
    iter.skipNewlines();

    if iter.nextIs("```") {
      sectionMembers.add(parseCodeSnippet(root, notesCollector, iter));
    } else if (iter.nextIs("#")) {
      headerStrength = 0;
      while iter.skipIfNext("#") {
        set headerStrength = headerStrength + 1;
      }
      headerContents =
          parseInlines(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((it) => {
                return iter.hasNext() and not iter.nextIs("\n");
              }));
      sectionMembers.add(Header(headerStrength, headerContents));
    } else if (iter.nextIs("<<<<")) {
      sectionMembers.add(parseSplit(root, notesCollector, iter));
    } else if (iter.nextIs(" * ") or iter.nextIs(" 1. ") or iter.nextIs(" . ")) {
      sectionMembers.add(
          parseList(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((iter) => {
                return continueF(iter) and not iter.nextIs("\n\n");
              })));
    } else if (iter.nextIs("> ")) {
      sectionMembers.add(
          parseQuote(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((iter) => {
                return continueF(iter) and not iter.nextIs("\n\n");
              })));
    } else if (iter.nextIs("! ")) {
      sectionMembers.add(
          parseCallout(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((iter) => {
                return continueF(iter) and not iter.nextIs("\n\n");
              })));
    } else {
      inlineNode =
          parseLine(
              root,
              &notesCollector,
              &iter,
              &IFunction1<mut, &ParseIter, bool>((iter) => {
                return continueF(iter) and not iter.nextIs("\n\n");
              }));
      sectionMembers.add(Paragraph(inlineNode));
    }
  }

  return Section(sectionMembers);
}







func addLink(
    iter &ParseIter,
    allow_empty bool)
Link {
  iter.skipExpect("[");
  linkText = iter.getUntilExpected("]");
  iter.skipExpect("(");
  linkUrlAndAttrsStr = iter.getUntilExpected(")");
  if linkUrlAndAttrsStr.len() == 0 and allow_empty {
    return Link(linkText, "".slice(), List<StrSlice>());
  }
  vassert(linkUrlAndAttrsStr.len() > 0, "Bad link!");
  linkUrlAndAttrs = linkUrlAndAttrsStr.split(" ");
  vassert(linkUrlAndAttrs.len() > 0, "Bad link!");
  linkUrl = linkUrlAndAttrs.remove(0);
  classes = List<StrSlice>();
  foreach x in linkUrlAndAttrs {
    if x.startsWith(".") {
      classes.add(x.slice(1));
    } else {
      panic("Bad link attribute: {x}");
    }
  }

  return Link(linkText, linkUrl, classes);
}


func addInlineFullNote(
    root &Path,
    notesCollector &NotesCollector,
    noteContents Section)
int {
  id = (set notesCollector.nextId = notesCollector.nextId + 1);
  notesCollector.ids.add(id);

  notesCollector.noteContentsById.add(id, noteContents);

  return id;
}

func addNamedNoteAnchor(
    root &Path,
    notesCollector &NotesCollector,
    noteName StrSlice)
int {
  id = (set notesCollector.nextId = notesCollector.nextId + 1);
  notesCollector.ids.add(id);

  vassert(
      not notesCollector.idByName.ContainsKey(noteName),
      "Note " + noteName + " already exists!");

  notesCollector.idByName.add(noteName, id);
  notesCollector.nameById.add(id, noteName);

  return id;
}

func addInlineNote(
    root &Path,
    notesCollector &NotesCollector,
    iter &ParseIter)
NoteAnchor {
  iter.skipExpect("[#");

  // If theres just space after the hash, then we're defining the note's text inline.
  if iter.skipIfNext(" ") {
    subNotes = NotesCollector(0);
    subNoteContents =
        parseInlines(
            root,
            &subNotes,
            &iter,
            &IFunction1<mut, &ParseIter, bool>((iter) => {
              if not iter.hasNext() {
                panic("Must end note!");
              }
              return not iter.skipIfNext("]");
            }));

    paragraph = Paragraph(subNoteContents);
    section = Section(List<SectionMember>());
    section.members.add(paragraph);

    return NoteAnchor(addInlineFullNote(root, notesCollector, section));
  } else {
    noteName =
        iter.parseTextWhile(
            &IFunction1<mut, &ParseIter, bool>((it) => {
              if not iter.hasNext() {
                panic("Must end note!");
              }
              return not iter.skipIfNext("]");
            }));
    return NoteAnchor(addNamedNoteAnchor(root, notesCollector, noteName));
  }
}

func addSeparateNote(
    self &NotesCollector,
    noteName StrSlice,
    note Section) {
  vassert(
      self.idByName.ContainsKey(noteName),
      "Note " + noteName + " doesn't exist!");
  id = self.idByName.get(noteName).get();


  vassert(
      not self.noteContentsById.ContainsKey(id),
      "Note " + noteName + " already has contents!");

  self.noteContentsById.add(id, note);
}

func includePageMembers(
    root &Path,
    filepath &Path,
    notesCollector NotesCollector)
(List<PageMember>, NotesCollector) {
  s = readFileAsString(filepath.str());
  inclusionIter = ParseIter(s.slice());

  pageMembers = List<PageMember>();
  while inclusionIter.hasNext() {
    inclusionIter.skipNewlines();

    if inclusionIter.nextIs("<slice") {
      pageMembers.add(
          parseSlice(
              root,
              set notesCollector = NotesCollector(notesCollector.nextId),
              &inclusionIter));
    } else {
      section =
          parseSection(
              root,
              &notesCollector,
              &inclusionIter,
              &IFunction1<mut, &ParseIter, bool>((it) => {
                return it.hasNext() and not it.nextIs("<slice") and not it.nextIs("\n\n\n");
              }));
      pageMembers.add(section);
    }
  }

  return (pageMembers, notesCollector);
}

func parseDynPageMembers(
    root &Path,
    iter &ParseIter,
    notesCollector NotesCollector)
(List<PageMember>, NotesCollector) {
  [callName, positionalArgs] = parseDynCall(root, iter);

  // If we ever add more calls, add them here to this ladder
  if callName == "include" {
    vassert(positionalArgs.len() == 1, "Wrong number of args for call to {callName}, expected 1");
    filepath_str = positionalArgs.get(0).str();
    filepath = root./(filepath_str);

    [newPageMembers, newNotesCollector] = includePageMembers(root, &filepath, notesCollector);
    return (newPageMembers, newNotesCollector);
  } else {
    (iter);
    (positionalArgs);
    (callName);
    panic("Unknown dynamic call name: {callName}");
    return (List<PageMember>(), notesCollector);
  }
}
