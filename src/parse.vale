
struct NotesCollector {
  nextId! int;
  ids List<int>;
  idByName HashMap<StrSlice, int, StrSliceHasher, StrSliceEquator>;
  nameById HashMap<int, StrSlice, IntHasher, IntEquator>;
  noteContentsById HashMap<int, Section, IntHasher, IntEquator>;
}
fn NotesCollector(nextId int) NotesCollector {
  NotesCollector(
    nextId,
    List<int>(),
    HashMap<StrSlice, int, StrSliceHasher, StrSliceEquator>(
      StrSliceHasher(), StrSliceEquator()),
    HashMap<int, StrSlice, IntHasher, IntEquator>(IntHasher(), IntEquator()),
    HashMap<int, Section, IntHasher, IntEquator>(IntHasher(), IntEquator()))
}
fn Slice(newColor StrSlice, notesCollector NotesCollector) Slice {
  (nextId, ids, idByName, nameById, noteContentsById) = notesCollector;
  ret Slice(ids, newColor, noteContentsById);
}


fn parse(filepath str) Page {
  s = readFileAsString(filepath);
  iter = ParseIter(s.slice(), true);
  
  metadata = parseMetadata(&!iter);

  notesCollector! = NotesCollector(0);

  pageMembers = List<PageMember>();

  while (iter.hasNext()) {
    iter!.skipNewlines();

    if (iter.nextIs("<slice")) {
      pageMembers!.add(
          parseSlice(
              mut notesCollector = NotesCollector(notesCollector.nextId),
              &!iter));
    } else {
      section =
          parseSection(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((iter){
                ret iter.hasNext() and not iter.nextIs("<slice") and not iter.nextIs("\n\n\n");
              }));
      pageMembers!.add(section);
    }
  }

  pageMembers!.add(
      Slice(
          "".slice(),
          mut notesCollector = NotesCollector(notesCollector.nextId)));

  ret Page(metadata, pageMembers);
}


fn parseMetadata(input &!ParseIter) Metadata {
  title! = "".slice();
  subtitle! = "".slice();
  author! = "".slice();
  date! = "".slice();
  realm! = "".slice();
  path! = "".slice();
  namespace! = "".slice();
  layout! = "".slice();
  seriesName! = "".slice();
  seriesEntries = List<Link>();
  cssFiles = List<StrSlice>();

  if (input!.skipIfNext("---\n")) {
    while (not input!.skipIfNext("---\n")) {
      attrName = input!.getUntilExpected(":");
      input!.skipWhitespace();

      if (attrName == "title") {
        mut title = input!.getUntilExpected("\n");
      } else if (attrName == "subtitle") {
        mut subtitle = input!.getUntilExpected("\n");
      } else if (attrName == "author") {
        mut author = input!.getUntilExpected("\n");
      } else if (attrName == "date") {
        mut date = input!.getUntilExpected("\n");
      } else if (attrName == "realm") {
        mut realm = input!.getUntilExpected("\n");
      } else if (attrName == "path") {
        mut path = input!.getUntilExpected("\n");
      } else if (attrName == "namespace") {
        mut namespace = input!.getUntilExpected("\n");
      } else if (attrName == "layout") {
        mut layout = input!.getUntilExpected("\n");
      } else if (attrName == "series-name") {
        mut seriesName = input!.getUntilExpected("\n");
      } else if (attrName == "css") {
        cssFiles!.add(input!.getUntilExpected("\n"));
      } else if (attrName == "series-entry") {
        seriesEntries!.add(addLink(&!input));
        input!.skipExpect("\n");
      } else {
        panic("Unknown attribute: " + attrName);
      }
    }
  }

  if (seriesEntries.len() > 0) {
    // A series link with an empty url represents the current page
    foundEmptyLink! = false;
    seriesEntries.each((link){
      if (link.text == "" and link.url == "") {
        vassert(not foundEmptyLink, "Already an empty series entry!");
        mut foundEmptyLink = true;
      }
    });
    vassert(foundEmptyLink, "No empty series entry!");
  }

  ret Metadata(title, subtitle, author, date, realm, path, seriesName, seriesEntries, layout, namespace, cssFiles);
}


fn getListItemPrefix(style str) str {
  = if (style == "bullet") { " * " }
    else if (style == "ordered") { " 1. " }
    else if (style == "blank") { " . " }
    else { panic("unknown list style") }
}


fn nextIsListItem(originalIter &!ParseIter, style str) bool {
  lookaheadIter = copy(&originalIter);
  lookaheadIter!.skipNewlines();
  while (lookaheadIter!.skipIfNext("   ")) { }
  ret lookaheadIter.nextIs(getListItemPrefix(style));
}


fn parseList(
    notesCollector &!NotesCollector,
    iter &!ParseIter,
    continueF &!IFunction1<mut, &!ParseIter, bool>)
PolyList {
  style =
      if (iter.nextIs(" 1. ")) { "ordered" }
      else if (iter.nextIs(" * ")) { "bullet" }
      else if (iter.nextIs(" . ")) { "blank" }
      else { panic("unknown list style") };

  rootList = PolyList(style, List<ListMember>());
  // A stack of all the currently open lists.
  openLists = List<&PolyList>();
  openLists!.add(&rootList);

  while (continueF!(iter) and iter!.nextIsListItem(style)) {
    iter!.skipNewlines();
    thisListItemIndentation! = 1;
    while (iter!.skipIfNext("   ")) {
      mut thisListItemIndentation = thisListItemIndentation + 1;
    }
    iter!.skipExpect(getListItemPrefix(style));

    while (thisListItemIndentation > openLists.len()) {
      newList = PolyList(style, List<ListMember>());
      newListBorrow = &newList;
      openLists!.get(openLists.len() - 1).members!.add(newList);
      openLists!.add(newListBorrow);
    }
    while (thisListItemIndentation < openLists.len()) {
      openLists!.remove(openLists.len() - 1);
    }

    lineContents =
        parseLine(
            &!notesCollector,
            &!iter,
            &!IFunction1<mut, &!ParseIter, bool>((iter){
              ret continueF!(iter) and not iter.nextIs("\n");
            }));
    openLists!.get(openLists.len() - 1).members!.add(ListItem(lineContents));
  }

  ret rootList;
}


fn parseQuote(
    notesCollector &!NotesCollector,
    iter &!ParseIter,
    continueF &!IFunction1<mut, &!ParseIter, bool>)
Quote {
  inlines = List<InlineNode>();

  while (continueF!(iter) and iter.nextIs("> ")) {
    iter!.skipExpect("> ");

    lineContents =
        parseInlines(
            &!notesCollector,
            &!iter,
            &!IFunction1<mut, &!ParseIter, bool>((iter){
              ret continueF!(iter) and not iter.nextIs("\n");
            }));
    while (lineContents.inners.len() > 0) {
      inlines!.add(lineContents.inners!.remove(0));
    }
  }

  ret Quote(Compound(inlines));
}

fn parseCallout(
    notesCollector &!NotesCollector,
    iter &!ParseIter,
    continueF &!IFunction1<mut, &!ParseIter, bool>)
Callout {
  inlines = List<InlineNode>();

  while (continueF!(iter) and iter.nextIs("! ")) {
    iter!.skipExpect("! ");

    lineContents =
        parseInlines(
            &!notesCollector,
            &!iter,
            &!IFunction1<mut, &!ParseIter, bool>((iter){
              ret continueF!(iter) and not iter.nextIs("\n");
            }));
    while (lineContents.inners.len() > 0) {
      inlines!.add(lineContents.inners!.remove(0));
    }
  }

  ret Callout(Compound(inlines));
}


fn parseSplit(
    notesCollector &!NotesCollector,
    iter &!ParseIter)
Split {
  iter!.skipExpect("<<<<");
  iter!.skipNewlines();

  columns = List<List<Section>>();

  running! = true;
  while (running) {
    innerContinueF =
        IFunction1<mut, &!ParseIter, bool>((iter){
          if (not iter.hasNext()) {
            panic("<<<< must end with \/\/\/\/");
          }
          ret not iter.nextIs("\/\/\/\/") and not iter.nextIs(">>>>");
        });

    columnSections = List<Section>();

    while (innerContinueF!(iter)) {
      columnSections!.add(
          parseSection(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((iter){
                ret innerContinueF!(iter) and not iter.nextIs("\n\n\n");
              })));
      iter!.skipNewlines();
    }

    columns!.add(columnSections);

    mut running = iter!.skipIfNext("\/\/\/\/");
    iter!.skipNewlines();
  }

  iter!.skipNewlines();
  iter!.skipExpect(">>>>");

  ret Split(columns);
}


fn nextIsNoteBegin(originalIter &!ParseIter) bool {
  lookaheadIter = copy(&originalIter);
  if (not lookaheadIter!.skipIfNext("\n\n")) {
    ret false;
  }
  lookaheadIter!.skipNewlines();
  ret lookaheadIter!.skipIfNext("#");
}


fn parseSlice(
    notesCollector NotesCollector,
    iter &!ParseIter)
Slice {
  iter!.skipExpect("<slice");

  newColor! = "".slice();
  if (iter!.skipIfNext(" new-color=\"")) {
    mut newColor = iter!.getUntilExpected("\"");
  }
  if (iter!.skipIfNext(">")) {
    iter!.skipNewlines();

    continueF =
        IFunction1<mut, &!ParseIter, bool>((iter){
          if (not iter.hasNext()) {
            panic("<slice> must end with </slice>");
          }
          ret not iter.nextIs("</slice>");
        });

    while (continueF!(iter)) {
      iter!.skipNewlines();
      iter!.skipExpect("#");
      noteId = iter!.getUntilExpected(":");

      noteOutput =
          parseSection(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((iter){
                ret continueF!(iter) and not iter!.nextIsNoteBegin();
              }));
      iter!.skipNewlines();
      notesCollector!.addSeparateNote(noteId, noteOutput);
    }

    iter!.skipIfNext("</slice>");
  } else if (iter!.skipIfNext("/>") or iter!.skipIfNext(" />")) {
    // Do nothing
  } else {
    panic("<slice should end in > or />");
  }

  ret Slice(newColor, notesCollector);
}


fn parseInlineNode(
    notesCollector &!NotesCollector,
    iter &!ParseIter)
Opt<InlineNode> {
  if (not iter.previousWasWordChar and iter.nextIs("*")) {
    ret Some<InlineNode>(parseBold(notesCollector, iter));
  } else if (not iter.previousWasWordChar and iter.nextIs("_")) {
    ret Some<InlineNode>(parseItalic(notesCollector, iter));
  } else if (iter.nextIs("[#")) {
    ret Some<InlineNode>(addInlineNote(notesCollector, iter));
  } else if (not iter.previousWasWordChar and iter.nextIs("[")) {
    ret Some<InlineNode>(addLink(&!iter));
  } else if (not iter.previousWasWordChar and iter!.skipIfNext("`")) {
    code = iter!.getUntilExpected("`");
    ret Some<InlineNode>(InlineCode(code));
  } else {
    ret None<InlineNode>();
  }
}

fn parseInlines(
    notesCollector &!NotesCollector,
    iter &!ParseIter,
    continueF &!IFunction1<mut, &!ParseIter, bool>)
Compound {
  inners = List<InlineNode>();

  currentTextNode! StrSlice = "".slice();

  running! = true;
  while (running and iter.hasNext()) {
    if (not continueF!(iter)) {
      mut running = false;
    } else {
      maybeInner = parseInlineNode(notesCollector, iter);
      if (not maybeInner.isEmpty()) {
        if (currentTextNode != "") {
          inners!.add(Text(mut currentTextNode = "".slice()));
        }
        inners!.add((maybeInner).get());
      } else {
        (maybeInner).drop();
        mut currentTextNode = (currentTextNode + iter!.getNext()).slice();
      }
    }
  }
  if (currentTextNode != "") {
    inners!.add(Text(mut currentTextNode = "".slice()));
  }

  ret Compound(inners);
}

fn parseBold(
    notesCollector &!NotesCollector,
    iter &!ParseIter)
Bold {
  iter!.skipExpect("*");

  compound =
    parseInlines(
      &!notesCollector,
      &!iter,
      &!IFunction1<mut, &!ParseIter, bool>((iter){
        if (not iter.hasNext()) {
          panic("Must end bold!");
          ret false;
        } else if (iter.nextIs("*")) {
          iter!.skipExpect("*");
          ret false;
        } else {
          ret true;
        }
      }));

  ret Bold(compound);
}

fn parseItalic(
    notesCollector &!NotesCollector,
    iter &!ParseIter)
Italic {
  iter!.skipExpect("_");

  compound =
    parseInlines(
      &!notesCollector,
      &!iter,
      &!IFunction1<mut, &!ParseIter, bool>((iter){
        if (not iter.hasNext()) {
          panic("Must end italic!");
          ret false;
        } else if (iter.nextIs("_")) {
          iter!.skipExpect("_");
          ret false;
        } else {
          ret true;
        }
      }));

  ret Italic(compound);
}

fn parseLine(
    notesCollector &!NotesCollector,
    iter &!ParseIter,
    continueF &!IFunction1<mut, &!ParseIter, bool>)
InlineNode {
  ret parseInlines(
    &!notesCollector,
    &!iter,
    &!IFunction1<mut, &!ParseIter, bool>((iter){
      ret continueF!(iter) and iter.hasNext();
    }));
}



fn parseTextUntil(
    iter &!ParseIter,
    continueF &!IFunction1<mut, &!ParseIter, bool>)
StrSlice {
  code! StrSlice = "".slice();

  running! = true;
  while (running and iter.hasNext()) {
    if (not continueF!(iter)) {
      mut running = false;
    } else {
      mut code = (code + iter!.getNext()).slice();
    }
  }

  ret code;
}


fn parseCodeItem(notesCollector &!NotesCollector, iter &!ParseIter) CodeItem {
  // println("go");

  iter!.skipExpect("```");

// println("ko");

  lang =
      parseTextUntil(
          &!iter,
          &!IFunction1<mut, &!ParseIter, bool>((it){
            if (not it.hasNext()) {
               panic("``` must have matching \\n```!");
            }
            ret not it.nextIs("\n");
          }));
  if (lang.has(":")) {
    panic("Language has : in it!");
  }
  if (lang.has(" ")) {
    panic("Language has space in it!");
  }
  if (lang.has("`")) {
    panic("Language has ` in it!");
  }

// println("bo " + lang);

  // We register the chevron notes here and leave the code mostly untouched, because:
  // - If we slice up the code into a Compound with Text and NoteAnchor, then
  //   its harder later on to merge the text parts of the code back together to
  //   feed into the syntax highlighter (and hard to know where to put the
  //   anchors back in).
  // - If we syntax highlight the code now, it means we're making the decision
  //   now on how to display it, which belongs in the printing stage.
  // Though, we do replace the note name with a note id, to be consistent with how
  // NoteAnchor works.

  code =
      parseChevronNoteAnchors(
          &!notesCollector,
          parseTextUntil(
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((it){
// println("bi");

                if (not it.hasNext()) {
// println("mi");

                  panic("``` must have matching \\n```!");
                }
// println("di");

                ret not it.nextIs("\n```");
              })));
// println("vo");
  ret CodeItem(lang, code.slice());
}

fn parseCodeArgs(iter &!ParseIter) List<StrSlice> {
  args = List<StrSlice>();

  // println("ante loop");

  running! = true;
  while (running) {

    // println("moo");

    while (iter!.skipIfNext(" ")) {}

    // println("boo");
    
    if (iter!.skipIfNext("\n")) {
      // println("zoo");
    
      mut running = false;
    } else if (iter!.skipIfNext("`")) {
      // println("woo");
      x = iter!.getUntilExpected("`");
      args!.add(slice("`" + x + "`"));
    } else {
      // println("xoo");
      // Get until whitespace
      arg = parseTextUntil(
          &!iter,
          &!IFunction1<mut, &!ParseIter, bool>((it){
            if (not iter.hasNext()) {
              panic("``` must have matching \\n```!");
            }
            ret not iter.nextIs(" ") and not iter.nextIs("\n");
          }));
      // println("koo");
      args!.add(arg);
    }
  }
  // println("post loop");

  ret args;
}

fn parseCodeSnippet(notesCollector &!NotesCollector, iter &!ParseIter) CodeSnippet {
  args! = List<StrSlice>();
  items = List<CodeItem>();

    // println("before loop");
  running! = true;
  while (running) {
    // println("in an iter");
    items!.add(parseCodeItem(notesCollector, iter));

    vassert(iter.nextIs("\n```"));
    iter!.skipExpect("\n");
    
    // println("parsed item");
    if (iter.hasNext() and iter!.skipIfNext("```:")) {
      // Now we'll parse args that come after the language, like in:
      //   ```Vale
      //   fn main() {
      //     a = A();
      //   }
      //   ```: vstl/list.vale `struct A{}`
      mut args = parseCodeArgs(iter);
      mut running = false;
    }
    if (not iter.hasNext() or iter!.skipIfNext("```\n")) {
      // println("breaking");
      mut running = false;
    }
    // println("end an iter");
  }

  ret CodeSnippet(items, args);
}


// Looks through for any chevron notes like «mynote» and registers them with
// the notes collector.
fn parseChevronNoteAnchors(notesCollector &!NotesCollector, haystack StrSlice) str {
  result! = "";

// println("ba");

  iter = ParseIter(haystack, true);
// println("na");

  while (iter.hasNext()) {
// println("va");

    if (iter!.skipIfNext("«")) {
// println("za");

      noteName = iter!.getUntilExpected("»");
      id = addNamedNoteAnchor(notesCollector, noteName);
      mut result = result + ("«" + id + "»");
    } else {
// println("xa");

      mut result = result + iter!.getNext();

// println("la");
    }
  }
// println("ya");


  ret result;
}


fn parseSection(
    notesCollector &!NotesCollector,
    iter &!ParseIter,
    continueF &!IFunction1<mut, &!ParseIter, bool>)
Section {
  sectionMembers = List<SectionMember>();

  while (continueF!(iter)) {
    iter!.skipNewlines();

    if (iter.nextIs("```")) {
      sectionMembers!.add(parseCodeSnippet(notesCollector, iter));
    } else if (iter.nextIs("#")) {
      headerStrength! = 0;
      while (iter!.skipIfNext("#")) {
        mut headerStrength = headerStrength + 1;
      }
      headerContents =
          parseInlines(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((it){
                ret iter.hasNext() and not iter.nextIs("\n");
              }));
      sectionMembers!.add(Header(headerStrength, headerContents));
    } else if (iter.nextIs("<<<<")) {
      sectionMembers!.add(parseSplit(notesCollector, iter));
    } else if (iter.nextIs(" * ") or iter.nextIs(" 1. ") or iter.nextIs(" . ")) {
      sectionMembers!.add(
          parseList(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((iter){
                ret continueF!(iter) and not iter.nextIs("\n\n");
              })));
    } else if (iter.nextIs("> ")) {
      sectionMembers!.add(
          parseQuote(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((iter){
                ret continueF!(iter) and not iter.nextIs("\n\n");
              })));
    } else if (iter.nextIs("! ")) {
      sectionMembers!.add(
          parseCallout(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((iter){
                ret continueF!(iter) and not iter.nextIs("\n\n");
              })));
    } else {
      inlineNode =
          parseLine(
              &!notesCollector,
              &!iter,
              &!IFunction1<mut, &!ParseIter, bool>((iter){
                ret continueF!(iter) and not iter.nextIs("\n\n");
              }));
      sectionMembers!.add(Paragraph(inlineNode));
    }
  }

  ret Section(sectionMembers);
}







fn addLink(
    iter &!ParseIter)
Link {
  iter!.skipExpect("[");
  linkText = iter!.getUntilExpected("]");
  iter!.skipExpect("(");
  linkUrl = iter!.getUntilExpected(")");
  ret Link(linkText, linkUrl);
}


fn addInlineFullNote(
    notesCollector &!NotesCollector,
    noteContents Section)
int {
  id = (mut notesCollector.nextId = notesCollector.nextId + 1);
  notesCollector.ids!.add(id);

  notesCollector.noteContentsById!.add(id, noteContents);

  ret id;
}

fn addNamedNoteAnchor(
    notesCollector &!NotesCollector,
    noteName StrSlice)
int {
  id = (mut notesCollector.nextId = notesCollector.nextId + 1);
  notesCollector.ids!.add(id);

  vassert(
      not notesCollector.idByName.has(noteName),
      "Note " + noteName + " already exists!");

  notesCollector.idByName!.add(noteName, id);
  notesCollector.nameById!.add(id, noteName);

  ret id;
}

fn addInlineNote(
    notesCollector &!NotesCollector,
    iter &!ParseIter)
NoteAnchor {
  iter!.skipExpect("[#");

  // If theres just space after the hash, then we're defining the note's text inline.
  if (iter!.skipIfNext(" ")) {
    subNotes = NotesCollector(0);
    subNoteContents =
        parseInlines(
            &!subNotes,
            &!iter,
            &!IFunction1<mut, &!ParseIter, bool>((iter){
              if (not iter.hasNext()) {
                panic("Must end note!");
              }
              ret not iter!.skipIfNext("]");
            }));

    paragraph = Paragraph(subNoteContents);
    section = Section(List<SectionMember>());
    section.members!.add(paragraph);

    ret NoteAnchor(addInlineFullNote(notesCollector, section));
  } else {
    noteName =
        iter!.parseTextUntil(
            &!IFunction1<mut, &!ParseIter, bool>((it){
              if (not iter.hasNext()) {
                panic("Must end note!");
              }
              ret not iter!.skipIfNext("]");
            }));
    ret NoteAnchor(addNamedNoteAnchor(notesCollector, noteName));
  }
}

fn addSeparateNote(
    self &!NotesCollector,
    noteName StrSlice,
    note Section) {
  vassert(
      self.idByName.has(noteName),
      "Note " + noteName + " doesn't exist!");
  id = self.idByName.get(noteName).get();


  vassert(
      not self.noteContentsById.has(id),
      "Note " + noteName + " already has contents!");

  self.noteContentsById!.add(id, note);
}

